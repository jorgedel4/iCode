USE iCode;

INSERT INTO campus VALUES
    ("PUE", "Puebla"),
    ("CSF", "Santa Fe"),
    ("MTY", "Monterrey"),
    ("GDL", "Guadalajara"),
    ("TOL", "Toluca"),
    ("HID", "Hidalgo");

INSERT INTO terms VALUES
    ("IV22", "Invierno 2022", '2022-01-5 00:00:00', '2022-02-12 23:59:59'), 
    ("FJ22", "Febrero-Junio 2022", '2022-02-15 00:00:00', '2022-06-26 23:59:59'),
    ("VE22", "Verano 2022", '2022-07-5 00:00:00', '2022-08-25 23:59:59'),
    ("AD22", "Agosto-Diciembre 2022", '2022-08-28 00:00:00', '2022-12-12 23:59:59'),
    ("IV23", "Invierno 2023", '2023-01-5 00:00:00', '2023-02-12 23:59:59'), 
    ("FJ23", "Febrero-Junio 2023", '2023-02-15 00:00:00', '2023-06-26 23:59:59'),
    ("VE23", "Verano 2023", '2023-07-5 00:00:00', '2023-08-25 23:59:59'),
    ("AD23", "Agosto-Diciembre 2023", '2023-08-28 00:00:00', '2023-12-12 23:59:59');

INSERT INTO professors VALUES
    ("L00000001", "PUE", "Daniel", "Perez", "Rojas"),
    ("L00000002", "MTY", "Claudia", "Perez", "Lezama"),
    ("L00000003", "GDL", "Rosa", "Paredes", "Juarez"),
    ("L00000004", "PUE", "Alberto", "Oliart", "Lorem"),
    ("L00000005", "HID", "Clara", "Sanchez", "Perez"),
    ("L00000006", "CSF", "Alba", "Romero", "Garcia"),
    ("L00000007", "PUE", "Eduardo", "Hernández", "Martínez"),
    ("L00000008", "CSF", "Isabel", "Gómez", "Santos"),
    ("L00000009", "MTY", "Francisco", "López", "Cantu"),
    ("L00000010", "GDL", "Luisa", "Vargas", "Lara"),
    ("L00000011", "TOL", "Ricardo", "Mendoza", "Solis"),
    ("L00000012", "HID", "Julia", "Torres", "Sánchez"),
    ("L00000013", "PUE", "Andrés", "Guzmán", "López"),
    ("L00000014", "CSF", "María", "Sánchez", "Morales"),
    ("L00000015", "MTY", "Javier", "Hernández", "Vargas"),
    ("L00000016", "GDL", "Laura", "López", "Paredes"),
    ("L00000017", "TOL", "Roberto", "Ramírez", "Mendoza"),
    ("L00000018", "HID", "Ana", "Flores", "Castillo"),
    ("L00000019", "PUE", "Diego", "Martínez", "Gómez"),
    ("L00000020", "CSF", "Patricia", "Santos", "Cruz");

INSERT INTO courses VALUES
    ("TC1028", "Pensamiento computacional"),
    ("TC1030", "Programacion orientada a objetos"),
    ("TC1031", "Estructuras de datos y algoritmos");

INSERT INTO admins VALUES
    ("S00000001", "PUE", "Sam", "Sepiol", NULL),
    ("S00000002", "GDL", "Kanye", "Omari", "West"),
    ("S00000003", "MTY", "Galactus", "Lider", "Supremo"),
    ("S00000004", "CSF", "Luisa", "Gómez", "Elena"),
    ("S00000005", "TOL", "Rodrigo", "Mendoza", "Antonio"),
    ("S00000006", "HID", "María", "Torres", NULL);

INSERT INTO students VALUES
    ("A01551955", "PUE", "Jorge", "Delgado", "Morales"),
    ("A01423294", "PUE", "Isra", "Perez", "Ontiveros"),
    ("A01731511", "PUE", "Karla", "Sanchez", "Olivares"),
    ("A00157831", "PUE", "Jose", "Cardoza", "Mendez"),
    ("A08787803", "PUE", "Maria", "Ortiz", "Reyes"),
    ("A01712734", "PUE", "Adriana", "Fernandez", "Rojas"),
    ("A04567890", "PUE", "Eduardo", "Hernandez", "Perez"),
    ("A05678901", "PUE", "Karina", "Sanchez", "Juarez"),
    ("A06615812", "CSF", "Juan", "Ortega", "Vasquez"),
    ("A09707892", "CSF", "Aldo", "Pacheco", "Morales"),
    ("A00102193", "CSF", "Carlos", "Villasenor", "Pacheco"),
    ("A07463591", "CSF", "María Fernanda", "Torres", "López"),
    ("A08574291", "CSF", "Eduardo", "Gómez", "Hernández"),
    ("A02384761", "CSF", "Alejandra", "Ramírez", "Soto"),
    ("A01212321", "MTY", "Carolina", "Martinez", "Gutierrez"),
    ("A01212121", "MTY", "Patricio", "Ramirez", "Sandoval"),
    ("AO6612193", "MTY", "Mauricio", "Oropeza", "Ruiz"),
    ("A01552812", "MTY", "Ramiro", "Hernandez", "Villasenor"),
    ("A00234567", "MTY", "Daniela", "Vargas", "Castillo"),
    ("A00345678", "MTY", "Luis Antonio", "Torres", "Hernandez"),
    ("A00456789", "MTY", "Valeria", "Lopez", "Juarez"),
    ("A01730092", "MTY", "Ana", "Lopez", "Garcia"),
    ("A00871372", "MTY", "Sofia", "Garcia", "Jimenez"),
    ("A07136662", "GDL", "Fernando", "Gonzalez", "Cortes"),
    ("A09123312", "GDL", "Julio", "Castillo", "Sanchez"),
    ("A01112341", "GDL", "Paulina", "Rojas", "Torres"),
    ("A09707662", "GDL", "Diego", "Valle", "Gutierrez"),
    ("A08062912", "GDL", "Luis", "Mendez", "Hernandez"),
    ("A09873412", "TOL", "Laura", "Hernández", "González"),
    ("A07654321", "TOL", "Roberto", "Martínez", "Sánchez"),
    ("A08573492", "TOL", "Ana Karen", "Gómez", "López"),
    ("A09434567", "TOL", "Mariana", "Castillo", "Santos"),
    ("A09545678", "TOL", "Carlos", "Juarez", "Gomez"),
    ("A09656789", "TOL", "Sandra", "Ramirez", "Lopez"),
    ("A09283746", "TOL", "Eduardo", "Torres", "Ramírez"),
    ("A06543298", "TOL", "Karla", "Soto", "Díaz"),
    ("A04281593", "HID", "Mariana", "Alvarez", "Torres"),
    ("A09753149", "HID", "Rafael", "Diaz", "Castillo"),
    ("A06149233", "HID", "Miguel", "Ramirez", "Martinez"),
    ("A03827183", "HID", "Sergio", "Torres", "Díaz"),
    ("A09989012", "HID", "David", "Gutierrez", "Castillo"),
    ("A10090123", "HID", "Paola", "Lopez", "Hernandez"),
    ("A10101234", "HID", "Javier", "Ramirez", "Juarez"),
    ("A10212345", "HID", "Karen", "Martinez", "Gomez"),
    ("A09273618", "HID", "Paola", "Martínez", "Ramírez");

INSERT INTO grupos VALUES
    ("G000000001", "TC1028", "L00000001", "FJ23"),
    ("G000000002", "TC1031", "L00000001", "FJ23"),
    ("G000000003", "TC1028", "L00000001", "IV23"),
    ("G000000004", "TC1028", "L00000002", "FJ23"),
    ("G000000005", "TC1030", "L00000002", "FJ23"),
    ("G000000006", "TC1031", "L00000003", "IV23"),
    ("G000000007", "TC1028", "L00000004", "FJ23"),
    ("G000000008", "TC1028", "L00000005", "IV23"),
    ("G000000009", "TC1028", "L00000006", "IV23"),
    ("G000000010", "TC1028", "L00000007", "FJ23"),
    ("G000000011", "TC1030", "L00000008", "FJ23"),
    ("G000000012", "TC1030", "L00000009", "FJ23"),
    ("G000000013", "TC1030", "L00000010", "IV23"),
    ("G000000014", "TC1031", "L00000011", "IV23"),
    ("G000000015", "TC1031", "L00000012", "IV23"),
    ("G000000016", "TC1031", "L00000013", "FJ23"),
    ("G000000017", "TC1028", "L00000014", "VE23"),
    ("G000000018", "TC1028", "L00000015", "VE23"),
    ("G000000019", "TC1030", "L00000016", "FJ23"),
    ("G000000020", "TC1030", "L00000017", "FJ23"),
    ("G000000021", "TC1031", "L00000018", "IV23"),
    ("G000000022", "TC1031", "L00000019", "IV23"),
    ("G000000023", "TC1031", "L00000020", "VE23"),
    ("G000000024", "TC1028", "L00000007", "VE23"),
    ("G000000025", "TC1028", "L00000013", "FJ23"),
    ("G000000026", "TC1030", "L00000014", "FJ23"),
    ("G000000027", "TC1030", "L00000020", "VE23"),
    ("G000000028", "TC1031", "L00000010", "IV23"),
    ("G000000029", "TC1031", "L00000011", "IV23"),
    ("G000000030", "TC1028", "L00000012", "FJ23"),
    ("G000000031", "TC1028", "L00000016", "VE23"),
    ("G000000032", "TC1030", "L00000018", "FJ23"),
    ("G000000033", "TC1030", "L00000019", "FJ23"),
    ("G000000034", "TC1031", "L00000015", "IV23"),
    ("G000000035", "TC1031", "L00000017", "IV23");

INSERT INTO enrollments VALUES
    ("G000000001", "A01551955"),
    ("G000000001", "A01731511"),
    ("G000000001", "A00157831"),
    ("G000000001", "A08787803"),
    ("G000000001", "A01712734"),
    ("G000000002", "A01551955"),
    ("G000000002", "A01731511"),
    ("G000000002", "A00157831"),
    ("G000000003", "A01712734"),
    ("G000000003", "A01551955"),
    ("G000000003", "A00157831"),
    ("G000000004", "A01212321"),
    ("G000000004", "A01212121"),
    ("G000000004", "A00871372"),
    ("G000000004", "AO6612193"),
    ("G000000005", "A01552812"),
    ("G000000005", "A01730092"),
    ("G000000006", "A07136662"),
    ("G000000006", "A09123312"),
    ("G000000006", "A01112341"),
    ("G000000006", "A09707662"),
    ("G000000007", "A04281593"),
    ("G000000008", "A08787803"),
    ("G000000009", "A01712734"),
    ("G000000010", "A01551955"),
    ("G000000011", "A01731511"),
    ("G000000012", "A00157831"),
    ("G000000013", "A07463591"),
    ("G000000014", "A08574291"),
    ("G000000015", "A02384761"),
    ("G000000016", "A01212321"),
    ("G000000016", "A01212121"),
    ("G000000017", "A00871372"),
    ("G000000018", "AO6612193"),
    ("G000000019", "A01552812"),
    ("G000000019", "A00234567"),
    ("G000000020", "A01730092"),
    ("G000000021", "A00871372"),
    ("G000000022", "A07136662"),
    ("G000000023", "A09123312"),
    ("G000000024", "A01112341"),
    ("G000000025", "A09707662"),
    ("G000000026", "A04281593"),
    ("G000000027", "A06149233"),
    ("G000000028", "A01551955"),
    ("G000000028", "A01731511"),
    ("G000000029", "A00157831"),
    ("G000000030", "A08787803"),
    ("G000000031", "A01712734"),
    ("G000000032", "A04567890"),
    ("G000000033", "A05678901"),
    ("G000000034", "A06615812"),
    ("G000000035", "A09707892"),
    ("G000000007", "A06149233");

INSERT INTO modules VALUES
    ("M0000000000000000001", "TC1028", "Basics"),
    ("M0000000000000000002", "TC1028", "Conditionals"),
    ("M0000000000000000003", "TC1028", "For loops"),
    ("M0000000000000000004", "TC1030", "Atributos"),
    ("M0000000000000000005", "TC1030", "Metodos"),
    ("M0000000000000000006", "TC1030", "Polimorfismo"),
    ("M0000000000000000007", "TC1031", "Complejidades"),
    ("M0000000000000000008", "TC1031", "Busqueda binaria"),
    ("M0000000000000000009", "TC1031", "Arbol binario"),
    ("M0000000000000000010", "TC1028", "Recursividad"),
    ("M0000000000000000011", "TC1028", "Estructuras de datos"),
    ("M0000000000000000012", "TC1030", "Herencia"),
    ("M0000000000000000013", "TC1030", "Interfaces"),
    ("M0000000000000000014", "TC1030", "Excepciones"),
    ("M0000000000000000015", "TC1031", "Ordenamiento"),
    ("M0000000000000000016", "TC1031", "Grafos"),
    ("M0000000000000000017", "TC1031", "Programación dinámica"),
    ("M0000000000000000018", "TC1028", "Manejo de archivos"),
    ("M0000000000000000019", "TC1028", "Debugging");

INSERT INTO moduleConfigs VALUES
    ("M0000000000000000001", "G000000001", 3, TRUE),
    ("M0000000000000000001", "G000000003", 2, TRUE),
    ("M0000000000000000001", "G000000008", 3, TRUE),
    ("M0000000000000000002", "G000000001", 3, TRUE),
    ("M0000000000000000002", "G000000003", 3, FALSE),
    ("M0000000000000000002", "G000000005", 3, FALSE),
    ("M0000000000000000003", "G000000001", 3, TRUE),
    ("M0000000000000000003", "G000000003", 1, TRUE),
    ("M0000000000000000003", "G000000006", 1, TRUE),
    ("M0000000000000000003", "G000000008", 2, FALSE),
    ("M0000000000000000004", "G000000002", 2, TRUE),
    ("M0000000000000000004", "G000000005", 2, TRUE),
    ("M0000000000000000004", "G000000010", 1, TRUE),
    ("M0000000000000000005", "G000000004", 3, TRUE),
    ("M0000000000000000005", "G000000011", 3, FALSE),
    ("M0000000000000000006", "G000000004", 1, TRUE),
    ("M0000000000000000006", "G000000005", 1, TRUE),
    ("M0000000000000000006", "G000000010", 2, FALSE),
    ("M0000000000000000007", "G000000002", 1, FALSE),
    ("M0000000000000000007", "G000000006", 2, FALSE),
    ("M0000000000000000007", "G000000009", 2, FALSE),
    ("M0000000000000000008", "G000000004", 2, FALSE),
    ("M0000000000000000008", "G000000009", 3, TRUE),
    ("M0000000000000000008", "G000000012", 1, TRUE),
    ("M0000000000000000009", "G000000007", 1, FALSE),
    ("M0000000000000000009", "G000000009", 1, TRUE),
    ("M0000000000000000010", "G000000002", 3, TRUE),
    ("M0000000000000000010", "G000000007", 2, TRUE),
    ("M0000000000000000011", "G000000006", 3, TRUE),
    ("M0000000000000000011", "G000000010", 3, TRUE),
    ("M0000000000000000012", "G000000007", 3, TRUE),
    ("M0000000000000000012", "G000000011", 1, TRUE),
    ("M0000000000000000013", "G000000011", 2, TRUE),
    ("M0000000000000000013", "G000000012", 3, TRUE),
    ("M0000000000000000014", "G000000012", 2, FALSE),
    ("M0000000000000000014", "G000000014", 3, FALSE),
    ("M0000000000000000015", "G000000013", 3, TRUE),
    ("M0000000000000000015", "G000000015", 3, TRUE),
    ("M0000000000000000016", "G000000013", 2, TRUE),
    ("M0000000000000000016", "G000000015", 1, TRUE),
    ("M0000000000000000017", "G000000013", 1, FALSE),
    ("M0000000000000000017", "G000000015", 2, FALSE),
    ("M0000000000000000018", "G000000014", 1, TRUE),
    ("M0000000000000000019", "G000000014", 2, TRUE);


INSERT INTO questions VALUES
    ("CQ000000000000000001", "M0000000000000000001", "codep", '{"description": "Print the number to the power of 2", "hinputs": [["2"], ["4"]], "houtputs": ["4", "16"], "sinputs": [["3"], ["6"]], "soutputs": ["9", "36"], "timeoutSec": 10, "forbiddenFunctions": [], "initialCode": "", "language": "python"}', 'L00000001', '2023-04-15 00:00:00', "APP"),
    ("CQ000000000000000002", "M0000000000000000001", "multi", '{"question": "What will be the output of the following code?\\n\\ndef add(a, b):\\n return a + b\\n\\nresult = add(3, 4)\\nprint(result)", "n_options": 4, "options": ["3", "4", "7", "None"], "correct_option": ["3"], "explanation": "The add() function takes two parameters and returns their sum. Calling add(3, 4) will return 7."}', 'L00000002', '2023-04-16 00:00:00', "APP"),
    ("CQ000000000000000003", "M0000000000000000001", "codep", '{"description": "Calculate the sum of two float numbers", "hinputs": [["2","3"], ["-1","5"]], "houtputs": ["5.0", "4.0"], "sinputs": [["4","-2"], ["8","10"]], "soutputs": ["2.0","18.0"], "timeoutSec": 10, "forbiddenFunctions": [], "initialCode": "", "language": "python"}', 'L00000001', '2023-04-15 00:00:00', "APP"),
    ("CQ000000000000000004", "M0000000000000000002", "multi", '{"question": "Which of the following is a correct way to declare a list in Python?\\n\\n1. list = [1, 2, 3]\\n2. list = (1, 2, 3)\\n3. list = {1, 2, 3}\\n4. list = {1: \\"one\\", 2: \\"two\\", 3: \\"three\\"}", "n_options": 4, "options": ["1", "2", "3", "4"], "correct_option": ["1"], "explanation": "The correct way to declare a list in Python is by using square brackets. Option 1, list = [1, 2, 3], is the correct syntax."}', 'L00000003', '2023-04-17 00:00:00', "APP"),
    ("CQ000000000000000005", "M0000000000000000002", "codep", '{"description": "Calculate the factorial of a number", "hinputs": [["3"], ["5"], ["0"]], "houtputs": ["6", "120", "1"], "sinputs": [["4"], ["2"], ["7"]], "soutputs": ["24", "2", "5040"], "timeoutSec": 10, "forbiddenFunctions": [], "initialCode": "", "language": "python"}', 'L00000001', '2023-04-15 00:00:00', "APP"),
    ("CQ000000000000000006", "M0000000000000000002", "multi", '{"question": "What will be the output of the following code?\\n\\ndef greet\(name\):\\n print(\\"Hello, \\" + name)\\n\\ngreet(\\"Alice\\")", "n_options": 4, "options": ["Hello, ", "Hello, Alice", "Alice", "None"], "correct_option": ["Hello, Alice"], "explanation": "The greet() function takes a parameter and prints a greeting message. Calling greet(\\"Alice\\") will print Hello, Alice."}', 'L00000004', '2023-04-18 00:00:00', "APP"),
    ("CQ000000000000000007", "M0000000000000000003", "codep", '{"description": "Calculate the Fibonacci sequence up to a given number of terms", "hinputs": [["5"], ["8"], ["10"]], "houtputs": ["0\\n1\\n1\\n2\\n3", "0\\n1\\n1\\n2\\n3\\n5\\n8\\n13", "0\\n1\\n1\\n2\\n3\\n5\\n8\\n13\\n21\\n34"], "sinputs": [["3"], ["6"], ["2"]], "soutputs": ["0\\n1\\n1", "0\\n1\\n1\\n2\\n3\\n5", "0\\n1"], "timeoutSec": 10, "forbiddenFunctions": [], "initialCode": "", "language": "python"}', 'L00000001', '2023-04-15 00:00:00', "APP"),
    ("CQ000000000000000008", "M0000000000000000003", "multi", '{"question": "What is the output of the following code snippet?\\n\\nnumbers = [1, 2, 3, 4, 5]\\nsum = 0\\nfor num in numbers:\\n sum += num\\nprint(sum)", "n_options": 4, "options": ["0", "1", "15", "10"], "correct_option": ["15"], "explanation": "The code calculates the sum of all the numbers in the list using a for loop. The sum will be 15."}', 'L00000005', '2023-04-19 00:00:00', "APP"),
    ("CQ000000000000000009", "M0000000000000000003", "codep", '{"description": "Calculate the average of a list of numbers", "hinputs": [["2 4 6"], ["10 20 30 40 50"]], "houtputs": ["4.0", "30.0"], "sinputs": [["-1 0 1"], ["5 5 5 5 5"]], "soutputs": ["0.0", "5.0"], "timeoutSec": 10, "forbiddenFunctions": [], "initialCode": "", "language": "python"}', 'L00000001', '2023-04-15 00:00:00', "APP"),
    ("CQ000000000000000010", "M0000000000000000004", "multi", '{"question": "Which of the following is a correct way to write a comment in Python?\\n\\n1. \/\/ This is a comment\\n2. \/\* This is a comment \*\/\\n3. # This is a comment\\n4. \<\!\-\- This is a comment \-\-\>", "n_options": 4, "options": ["1", "2", "3", "4"], "correct_option": ["3"], "explanation": "In Python, a comment starts with the hash symbol (#). Option 3, # This is a comment, is the correct way to write a comment."}', 'L00000006', '2023-04-20 00:00:00', "REJ"),
    ("CQ000000000000000011", "M0000000000000000004", "codep", '{"description": "Calculate the square of a number", "hinputs": [["2"], ["-3"], ["0"]], "houtputs": ["4", "9", "0"], "sinputs": [["4"], ["-5"], ["1"]], "soutputs": ["16", "25", "1"], "timeoutSec": 10, "forbiddenFunctions": [], "initialCode": "", "language": "python"}', 'L00000001', '2023-04-15 00:00:00', "APP"),
    ("CQ000000000000000012", "M0000000000000000004", "multi", '{"question": "What will be the value of x after executing the following code?\\n\\nx \= 5\\nx \+\= 3\\nx \*\= 2\\nprint(x)", "n_options": 4, "options": ["5", "8", "16", "24"], "correct_option": ["16"], "explanation": "The code first adds 3 to the value of x (5 + 3 = 8) and then multiplies it by 2 (8 * 2 = 16). The final value of x will be 16."}', 'L00000007', '2023-04-21 00:00:00', "APP"),
    ("CQ000000000000000013", "M0000000000000000005", "codep", '{"description": "Calculate the area of a rectangle (using float numbers)", "hinputs": [["3", "4"], ["5", "7"], ["2", "10"]], "houtputs": ["12.0", "35.0", "20.0"], "sinputs": [["2", "6"], ["8", "10"], ["4", "8"]], "soutputs": ["12.0", "80.0", "32.0"], "timeoutSec": 10, "forbiddenFunctions": [], "initialCode": "", "language": "python"}', 'L00000001', '2023-04-15 00:00:00', "APP"),
    ("CQ000000000000000014", "M0000000000000000005", "multi", '{"question": "Which of the following is not a valid data type in Python\?\\n\\n1. int\\n2. float\\n3. string\\n4. boolean", "n_options": 4, "options": ["1", "2", "3", "4"], "correct_option": ["4"], "explanation": "Boolean is a valid data type in Python, representing the values True or False. Option 4, boolean, is not a valid data type."}', 'L00000008', '2023-04-22 00:00:00', "APP"),
    ("CQ000000000000000015", "M0000000000000000005", "codep", '{"description": "Check if a string is a palindrome", "hinputs": [["racecar"], ["hello"], ["madam"]], "houtputs": ["True", "False", "True"], "sinputs": [["level"], ["python"], ["noon"]], "soutputs": ["True", "False", "True"], "timeoutSec": 10, "forbiddenFunctions": [], "initialCode": "", "language": "python"}', 'L00000001', '2023-04-15 00:00:00', "APP"),
    ("CQ000000000000000016", "M0000000000000000006", "multi", '{"question": "Which of the following is a correct way to check if two variables refer to the same object in memory?\\n\\n1. x is y\\n2. x == y\\n3. x.equals(y)\\n4. x is not y", "n_options": 4, "options": ["1", "2", "3", "4"], "correct_option": ["1"], "explanation": "The \\"is\\" operator in Python checks if two variables refer to the same object in memory. Option 1, x is y, is the correct way to check for object identity."}', 'L00000011', '2023-04-25 00:00:00', "APP"),
    ("CQ000000000000000017", "M0000000000000000006", "codep", '{"description": "Calculate the factorial of a number using recursion", "hinputs": [["3"], ["5"], ["0"]], "houtputs": ["6", "120", "1"], "sinputs": [["4"], ["2"], ["7"]], "soutputs": ["24", "2", "5040"], "timeoutSec": 10, "forbiddenFunctions": [], "initialCode": "", "language": "python"}', 'L00000001', '2023-04-15 00:00:00', "APP"),
    ("CQ000000000000000018", "M0000000000000000006", "multi", '{"question": "What will be the output of the following code?\\n\\nnumbers = [1, 2, 3, 4, 5]\\nreversed_numbers = numbers[::-1]\\nprint(reversed_numbers)", "n_options": 4, "options": ["[5, 4, 3, 2, 1]", "[1, 2, 3, 4, 5]", "[1, 5, 2, 4, 3]", "[5, 3, 1]"], "correct_option": ["[5, 4, 3, 2, 1]"], "explanation": "The slice notation numbers[::-1] returns a reversed copy of the list numbers. The output will be [5, 4, 3, 2, 1]."}', 'L00000012', '2023-04-26 00:00:00', "REJ"),
    ("CQ000000000000000019", "M0000000000000000007", "codep", '{"description": "Count the number of vowels in a string", "hinputs": [["hello"], ["Python"], ["Arandano"]], "houtputs": ["2", "1", "4"], "sinputs": [["algorithm"], ["apple"], ["cat"]], "soutputs": ["3", "2", "1"], "timeoutSec": 10, "forbiddenFunctions": [], "initialCode": "", "language": "python"}', 'L00000001', '2023-04-15 00:00:00', "APP"),
    ("CQ000000000000000020", "M0000000000000000007", "multi", '{"question": "Which of the following statements is true about Python?\\n\\n1. It is a high-level programming language.\\n2. It is an interpreted language.\\n3. It supports object-oriented programming.\\n4. All of the above.", "n_options": 4, "options": ["1", "2", "3", "4"], "correct_option": ["4"], "explanation": "All the statements are true. Python is a high-level programming language, it is interpreted, and it supports object-oriented programming."}', 'L00000013', '2023-04-27 00:00:00', "APP"),
    ("CQ000000000000000021", "M0000000000000000007", "codep", '{"description": "Check if a number is prime", "hinputs": [["7"], ["10"], ["13"]], "houtputs": ["True", "False", "True"], "sinputs": [["4"], ["2"], ["11"]], "soutputs": ["False", "True", "True"], "timeoutSec": 10, "forbiddenFunctions": [], "initialCode": "", "language": "python"}', 'L00000001', '2023-04-15 00:00:00', "APP"),
    ("CQ000000000000000022", "M0000000000000000008", "multi", '{"question": "What will be the output of the following code?\\n\\nfor i in range(3):\\n print(i)", "n_options": 4, "options": ["0", "1", "2", "3"], "correct_option": ["0", "1", "2"], "explanation": "The code uses a for loop to iterate over the range(3), which generates the numbers 0, 1, and 2. Therefore, the output will be 0, 1, and 2."}', 'L00000014', '2023-04-28 00:00:00', "APP"),
    ("CQ000000000000000023", "M0000000000000000008", "codep", '{"description": "Calculate the sum of all numbers in a list", "hinputs": [["1 2 3 4"], ["5 10 15"], ["0"]], "houtputs": ["10", "30", "0"], "sinputs": [["4 6 8"], ["1 2 3 4 5"], ["10 20 30 40"]], "soutputs": ["18", "15", "100"], "timeoutSec": 10, "forbiddenFunctions": [], "initialCode": "", "language": "python"}', 'L00000001', '2023-04-15 00:00:00', "APP"),
    ("CQ000000000000000024", "M0000000000000000008", "multi", '{"question": "Which of the following is a correct way to remove an element from a list in Python?\\n\\n1. list.remove(element)\\n2. list.pop(index)\\n3. del list[index]\\n4. All of the above.", "n_options": 4, "options": ["1", "2", "3", "4"], "correct_option": ["4"], "explanation": "All the options are correct ways to remove an element from a list in Python. Option 4, All of the above, is the correct answer."}', 'L00000015', '2023-04-29 00:00:00', "PEN"),
    ("CQ000000000000000025", "M0000000000000000009", "codep", '{"description": "Reverse a string", "hinputs": [["hello"], ["Python"], ["Alberto"]], "houtputs": ["olleh", "nohtyP", "otreblA"], "sinputs": [["world"], ["programming"], ["awesome"]], "soutputs": ["dlrow", "gnimmargorp", "emosewa"], "timeoutSec": 10, "forbiddenFunctions": [], "initialCode": "", "language": "python"}', 'L00000001', '2023-04-15 00:00:00', "APP"),
    ("CQ000000000000000026", "M0000000000000000009", "multi", '{"question": "What is the result of the following expression?\\n\\n3 ** 2", "n_options": 4, "options": ["3", "6", "9", "12"], "correct_option": ["9"], "explanation": "The ** operator in Python performs exponentiation. In this case, 3 raised to the power of 2 is equal to 9."}', 'L00000016', '2023-04-30 00:00:00', "APP"),
    ("CQ000000000000000027", "M0000000000000000009", "codep", '{"description": "Calculate the Fibonacci sequence", "hinputs": [["5"], ["8"], ["0"]], "houtputs": ["[0, 1, 1, 2, 3, 5]", "[0, 1, 1, 2, 3, 5, 8, 13, 21]", "[0]"], "sinputs": [["10"], ["3"], ["6"]], "soutputs": ["[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]", "[0, 1, 1, 2]", "[0, 1, 1, 2, 3, 5, 8]"], "timeoutSec": 10, "forbiddenFunctions": [], "initialCode": "", "language": "python"}', 'L00000001', '2023-04-15 00:00:00', "APP"),
    ("CQ000000000000000028", "M0000000000000000010", "multi", '{"question": "What will be the output of the following code?\\n\\nprint(\\"Hello, world!\\")", "n_options": 4, "options": ["Hello, world!", "Hello", "world!", "None"], "correct_option": ["Hello, world!"], "explanation": "The code prints the string \\"Hello, world!\\". Therefore, the output will be Hello, world!"}', 'L00000017', '2023-05-01 00:00:00', "APP"),
    ("CQ000000000000000029", "M0000000000000000010", "codep", '{"description": "Find the maximum number in a list", "hinputs": [["3 9 2 6 1"], ["5 10 15 2 8"], ["1 2 3 4 5"]], "houtputs": ["9", "15", "5"], "sinputs": [["10 5 8"], ["1 2 3"], ["0"]], "soutputs": ["10", "3", "0"], "timeoutSec": 10, "forbiddenFunctions": [], "initialCode": "", "language": "python"}', 'L00000001', '2023-04-15 00:00:00', "APP"),
    ("CQ000000000000000030", "M0000000000000000010", "multi", '{"question": "Which of the following is a correct way to concatenate two strings in Python?\\n\\n1. string1 . string2\\n2. string1 + string2\\n3. string1 , string2\\n4. string1.append(string2)", "n_options": 4, "options": ["1", "2", "3", "4"], "correct_option": ["2"], "explanation": "The + operator in Python is used for string concatenation. Option 2, string1 + string2, is the correct way to concatenate two strings."}', 'L00000018', '2023-05-02 00:00:00', "REJ"),
    ("CQ000000000000000031", "M0000000000000000011", "codep", '{"description": "Check if a string is an anagram", "hinputs": [["listen", "silent"], ["python", "java"], ["heart", "earth"]], "houtputs": ["True", "False", "True"], "sinputs": [["debit card", "bad credit"], ["restful", "fluster"]], "soutputs": ["True", "True"], "timeoutSec": 10, "forbiddenFunctions": [], "initialCode": "", "language": "python"}', 'L00000001', '2023-04-15 00:00:00', "APP"),
    ("CQ000000000000000032", "M0000000000000000011", "multi", '{"question": "What will be the output of the following code?\\n\\nx = 10\\nif x > 5:\\n print(\\"x is greater than 5\\")\\nelse:\\n print(\\"x is less than or equal to 5\\")", "n_options": 4, "options": ["x is greater than 5", "x is less than or equal to 5", "x", "None"], "correct_option": ["x is greater than 5"], "explanation": "The code checks if the value of x is greater than 5. Since x is 10, the condition is true, and the code will print x is greater than 5."}', 'L00000019', '2023-05-03 00:00:00', "APP"),
    ("CQ000000000000000033", "M0000000000000000011", "codep", '{"description": "Find the average of float numbers in a list", "hinputs": [["1 2 3 4 5"], ["10 20 30"], ["5 10 15 20"]], "houtputs": ["3.0", "20.0", "12.5"], "sinputs": [["2 4 6 8 10"], ["15 25 35"], ["1 2 3"]], "soutputs": ["6.0", "25.0", "2.0"], "timeoutSec": 10, "forbiddenFunctions": [], "initialCode": "", "language": "python"}', 'L00000009', '2023-04-15 00:00:00', "APP"),
    ("CQ000000000000000034", "M0000000000000000012", "multi", '{"question": "Which of the following is a correct way to open a file in Python?\\n\\n1. open(\\"file.txt\\", \\"r\\")\\n2. open(\\"file.txt\\", \\"w\\")\\n3. open(\\"file.txt\\", \\"a\\")\\n4. All of the above.", "n_options": 4, "options": ["1", "2", "3", "4"], "correct_option": ["4"], "explanation": "All the options are correct ways to open a file in Python. Option 4, All of the above, is the correct answer."}', 'L00000010', '2023-05-04 00:00:00', "REJ"),
    ("CQ000000000000000035", "M0000000000000000012", "codep", '{"description": "Check if a number is even", "hinputs": [["2"], ["7"], ["0"]], "houtputs": ["True", "False", "True"], "sinputs": [["4"], ["1"], ["-8"]], "soutputs": ["True", "False", "True"], "timeoutSec": 10, "forbiddenFunctions": [], "initialCode": "", "language": "python"}', 'L00000001', '2023-04-15 00:00:00', "APP"),
    ("CQ000000000000000036", "M0000000000000000012", "multi", '{"question": "What will be the output of the following code?\\n\\nnumbers = [1, 2, 3, 4, 5]\\nprint(numbers[3])", "n_options": 4, "options": ["1", "2", "3", "4"], "correct_option": ["4"], "explanation": "The code accesses the element at index 3 in the list numbers. Since the indexing starts from 0, numbers[3] corresponds to the fourth element, which is 4."}', 'L00000011', '2023-05-05 00:00:00', "APP"),
    ("CQ000000000000000037", "M0000000000000000013", "codep", '{"description": "Find the second largest number in a list", "hinputs": [["3 9 2 6 1"], ["5 10 15 2 8"], ["1 2 3 4 5"]], "houtputs": ["6", "10", "4"], "sinputs": [["10 5 8"], ["1 2 3"], ["5 4 5 5"]], "soutputs": ["8", "2", "4"], "timeoutSec": 10, "forbiddenFunctions": [], "initialCode": "", "language": "python"}', 'L00000001', '2023-04-15 00:00:00', "APP"),
    ("CQ000000000000000038", "M0000000000000000013", "multi", '{"question": "Which of the following is a correct way to check if a key is present in a dictionary in Python?\\n\\n1. key in dictionary\\n2. dictionary[key]\\n3. dictionary.get(key)\\n4. All of the above.", "n_options": 4, "options": ["1", "2", "3", "4"], "correct_option": ["4"], "explanation": "All the options are correct ways to check if a key is present in a dictionary in Python. Option 4, All of the above, is the correct answer."}', 'L00000012', '2023-05-06 00:00:00', "APP"),
    ("CQ000000000000000039", "M0000000000000000013", "codep", '{"description": "Remove duplicate elements from a list in ascendent order, give me a list of integers", "hinputs": [["1 2 3 4 4 5"], ["5 5 5 5"], ["1 2 3 3 3 3 4 5"]], "houtputs": ["[1, 2, 3, 4, 5]", "[5]", "[1, 2, 3, 4, 5]"], "sinputs": [["[10, 20, 30]"], ["[1, 1, 1, 1, 1]"], ["[5, 5, 5, 5, 5]"]], "soutputs": ["[10, 20, 30]", "[1]", "[5]"], "timeoutSec": 10, "forbiddenFunctions": [], "initialCode": "", "language": "python"}', 'L00000001', '2023-04-15 00:00:00', "PEN"),
    ("CQ000000000000000040", "M0000000000000000014", "multi", '{"question": "What will be the output of the following code?\\n\\nx = 2\\nprint(x * 3 + 2)", "n_options": 4, "options": ["6", "8", "10", "12"], "correct_option": ["8"], "explanation": "The code first multiplies the value of x (2) by 3, resulting in 6. Then it adds 2 to the result (6 + 2), which equals 8. The output will be 8."}', 'L00000013', '2023-05-07 00:00:00', "APP"),
    ("CQ000000000000000041", "M0000000000000000014", "codep", '{"description": "Counts the number of times an item appears in a list", "hinputs": [["1 2 2 3 4 2 5", "2"], ["5 5 5 5", "5"], ["1 2 3 4 5", "1"]], "houtputs": ["3", "4", "1"], "sinputs": [["2 4 6 8 10", "4"], ["1 1 1 1 1", "1"], ["5 5 5 5 5", "5"]], "soutputs": ["1", "5", "5"], "timeoutSec": 10, "forbiddenFunctions": [], "initialCode": "", "language": "python"}', 'L00000001', '2023-04-15 00:00:00', "REJ"),
    ("CQ000000000000000042", "M0000000000000000014", "multi", '{"question": "Which of the following is a correct way to loop through the keys of a dictionary in Python?\\n\\n1. for key in dictionary.keys():\\n2. for key in dictionary:\\n3. for key in dictionary.values():\\n4. for key in dictionary.items():", "n_options": 4, "options": ["1", "2", "3", "4"], "correct_option": ["2"], "explanation": "Option 2, for key in dictionary, is the correct way to loop through the keys of a dictionary. When iterating over a dictionary, by default, it iterates over the keys."}', 'L00000014', '2023-05-08 00:00:00', "APP"),
    ("CQ000000000000000043", "M0000000000000000015", "codep", '{"description": "Obtain the factorial of a number", "hinputs": [["5"], ["8"], ["3"]], "houtputs": ["120", "40320", "6"], "sinputs": [["4"], ["6"], ["0"]], "soutputs": ["24", "720", "1"], "timeoutSec": 10, "forbiddenFunctions": [], "initialCode": "", "language": "python"}', 'L00000001', '2023-04-15 00:00:00', "APP"),
    ("CQ000000000000000044", "M0000000000000000015", "codep", '{"description": "Check if a number is prime", "hinputs": [["7"], ["12"], ["2"]], "houtputs": ["True", "False", "True"], "sinputs": [["11"], ["15"], ["0"]], "soutputs": ["True", "False", "False"], "timeoutSec": 10, "forbiddenFunctions": [], "initialCode": "", "language": "python"}', 'L00000001', '2023-04-15 00:00:00', "APP"),
    ("CQ000000000000000045", "M0000000000000000015", "multi", '{"question": "What will be the output of the following code?\\n\\nprint(type(42))", "n_options": 4, "options": ["int", "str", "float", "None"], "correct_option": ["int"], "explanation": "The type() function in Python returns the type of an object. In this case, the object is the integer 42. The output will be int."}', 'L00000015', '2023-05-09 00:00:00', "APP"),
    ("CQ000000000000000046", "M0000000000000000016", "codep", '{"description": "Check if a text string is a palindrome", "hinputs": [["radar"], ["python"], ["level"]], "houtputs": ["True", "False", "True"], "sinputs": [["madam"], ["paco"], ["racecar"]], "soutputs": ["True", "False", "True"], "timeoutSec": 10, "forbiddenFunctions": [], "initialCode": "", "language": "python"}', 'L00000001', '2023-04-15 00:00:00', "APP"),
    ("CQ000000000000000047", "M0000000000000000016", "multi", '{"question": "Which of the following is a correct way to check if a file exists in Python?\\n\\n1. os.exists(file_path)\\n2. os.path.exists(file_path)\\n3. file.exists(file_path)\\n4. file.path.exists(file_path)", "n_options": 4, "options": ["1", "2", "3", "4"], "correct_option": ["2"], "explanation": "The correct way to check if a file exists in Python is by using the os.path.exists(file_path) function. Option 2 is the correct answer."}', 'L00000015', '2023-05-10 00:00:00', "APP"),
    ("CQ000000000000000048", "M0000000000000000016", "codep", '{"description": "Calculating the sum of the digits of a number", "hinputs": [["123"], ["9876"], ["456"]], "houtputs": ["6", "30", "15"], "sinputs": [["4567"], ["12345"], ["100"]], "soutputs": ["22", "15", "1"], "timeoutSec": 10, "forbiddenFunctions": [], "initialCode": "", "language": "python"}', 'L00000001', '2023-04-15 00:00:00', "APP"),
    ("CQ000000000000000049", "M0000000000000000017", "multi", '{"question": "What will be the output of the following code?\\n\\nnumbers = [1, 2, 3, 4, 5]\\nnumbers.append(6)\\nprint(numbers)", "n_options": 4, "options": ["[1, 2, 3, 4, 5]", "[1, 2, 3, 4, 5, 6]", "[6, 5, 4, 3, 2, 1]", "[5, 4, 3, 2, 1, 6]"], "correct_option": ["[1, 2, 3, 4, 5, 6]"], "explanation": "The append() method in Python is used to add an element to the end of a list. In this case, the number 6 is appended to the list numbers. The output will be [1, 2, 3, 4, 5, 6]."}','L00000016', '2023-05-10 00:00:00', "APP"),
    ("CQ000000000000000050", "M0000000000000000017", "codep", '{"description": "Check if two text strings are anagrams", "hinputs": [["listen", "silent"], ["python", "java"], ["triangle", "integral"]], "houtputs": ["True", "False", "True"], "sinputs": [["mary", "army"], ["cat", "dog"], ["hello", "world"]], "soutputs": ["True", "False", "False"], "timeoutSec": 10, "forbiddenFunctions": [], "initialCode": "", "language": "python"}', 'L00000001', '2023-04-15 00:00:00', "APP"),
    ("CQ000000000000000051", "M0000000000000000017", "multi", '{"question": "What will be the output of the following code?\\n\\nname = \\"John\\"\\nprint(name[1:3])", "n_options": 4, "options": ["Jo", "oh", "hn", "ohn"], "correct_option": ["oh"], "explanation": "The code uses slice notation to access a portion of the string name. name[1:3] will return the characters at indices 1 and 2, which are \\"o\\" and \\"h\\" respectively. The output will be \\"oh\\"."}', 'L00000017', '2023-05-11 00:00:00', "PEN"),
    ("CQ000000000000000052", "M0000000000000000018", "codep", '{"description": "Finding the greatest common divisor (GCD) of two numbers", "hinputs": [["24", "36"], ["15", "25"], ["12", "18"]], "houtputs": ["12", "5", "6"], "sinputs": [["48", "60"], ["35", "49"], ["24", "32"]], "soutputs": ["12", "7", "8"], "timeoutSec": 10, "forbiddenFunctions": [], "initialCode": "", "language": "python"}', 'L00000001', '2023-04-15 00:00:00', "APP"),
    ("CQ000000000000000053", "M0000000000000000018", "multi", '{"question": "Which of the following is a correct way to check if a list is empty in Python?\\n\\n1. if list: \\n2. if len(list) == 0: \\n3. if not list: \\n4. All of the above.", "n_options": 4, "options": ["1", "2", "3", "4"], "correct_option": ["4"], "explanation": "All the options are correct ways to check if a list is empty in Python. Option 4, All of the above, is the correct answer."}', 'L00000018', '2023-05-12 00:00:00', "APP"),
    ("CQ000000000000000054", "M0000000000000000018", "codep", '{"description": "Calculate the area of a circle given the radio", "hinputs": [["5"], ["10"], ["2.5"]], "houtputs": ["78.53981633974483", "314.1592653589793", "19.634954084936208"], "sinputs": [["3"], ["7"], ["1.5"]], "soutputs": ["28.274333882308138", "153.93804002589985", "7.0685834705770345"], "timeoutSec": 10, "forbiddenFunctions": [], "initialCode": "", "language": "python"}', 'L00000001', '2023-04-15 00:00:00', "APP"),
    ("CQ000000000000000055", "M0000000000000000019", "multi", '{"question": "What will be the output of the following code?\\n\\nfruits = [\\"apple\\\", \\"banana\\", \\"cherry\\"]\\nprint(len(fruits))", "n_options": 4, "options": ["0", "1", "2", "3"], "correct_option": ["3"], "explanation": "The len() function in Python returns the number of elements in a list. In this case, the list fruits contains 3 elements, so the output will be 3."}', 'L00000012', '2023-05-13 00:00:00', "APP"),
    ("CQ000000000000000056", "M0000000000000000019", "codep", '{"description": "Counting the number of vowels in a text string", "hinputs": [["hello"], ["python"], ["arandano"]], "houtputs": ["2", "1", "4"], "sinputs": [["programming"], ["algorithm"], ["artificial"]], "soutputs": ["4", "3", "4"], "timeoutSec": 10, "forbiddenFunctions": [], "initialCode": "", "language": "python"}', 'L00000001', '2023-04-15 00:00:00', "APP"),
    ("CQ000000000000000057", "M0000000000000000019", "multi", '{"question": "What will be the output of the following code?\\n\\nprint(2 + 3 * 4)", "n_options": 4, "options": ["20", "14", "12", "9"], "correct_option": ["14"], "explanation": "In Python, multiplication has a higher precedence than addition. Therefore, the expression 3 * 4 is evaluated first, resulting in 12. Then, 2 is added to 12, giving a final output of 14."}', 'L00000020', '2023-05-14 00:00:00', "APP"),
    ("CQ000000000000000058", "M0000000000000000019", "codep", '{"description": "Generate a list of prime numbers in a given range", "hinputs": [["1", "10"], ["10", "50"], ["50", "100"]], "houtputs": ["[2, 3, 5, 7]", "[11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]", "[53, 59, 61, 67, 71, 73, 79, 83, 89, 97]"], "sinputs": [["1", "5"], ["20", "30"], ["70", "80"]], "soutputs": ["[2, 3, 5]", "[23, 29]", "[71, 73, 79]"], "timeoutSec": 10, "forbiddenFunctions": [], "initialCode": "", "language": "python"}', 'L00000001', '2023-04-15 00:00:00', "APP"),
    ("CQ000000000000000059", "M0000000000000000019", "multi", '{"question": "Which of the following is a correct way to remove a key-value pair from a dictionary in Python?\\n\\n1. del dictionary[key]\\n2. dictionary.remove(key)\\n3. dictionary.pop(key)\\n4. dictionary.delete(key)", "n_options": 4, "options": ["1", "2", "3", "4"], "correct_option": ["1"], "explanation": "The del statement in Python is used to delete an item from a dictionary by specifying the key. Option 1, del dictionary[key], is the correct way to remove a key-value pair from a dictionary."}', 'L00000020', '2023-05-15 00:00:00', "APP");



INSERT INTO homework VALUES
    ("H0000000000000000001", "G000000001", "Tarea 1: Condicionales", '2023-05-05 00:00:00', '2023-05-26 00:00:00'),
    ("H0000000000000000002", "G000000001", "Tarea 2: Condicionales Parte 2", '2023-05-11 00:00:00', '2023-05-25 00:00:00'),
    ("H0000000000000000003", "G000000001", "Tarea 3: Introducción a Python", '2023-05-05 00:00:00', '2023-05-28 00:00:00'),
    ("H0000000000000000004", "G000000001", "Tarea 4: Estructuras de control en Python", '2023-05-11 00:00:00', '2023-05-29 00:00:00'),
    ("H0000000000000000005", "G000000002", "Tarea 1: Variables y tipos de datos en Python", '2023-05-05 00:00:00', '2023-05-26 00:00:00'),
    ("H0000000000000000006", "G000000002", "Tarea 2: Funciones en Python", '2023-05-11 00:00:00', '2023-05-25 00:00:00'),
    ("H0000000000000000007", "G000000003", "Tarea 1: Listas y tuplas en Python", '2023-05-05 00:00:00', '2023-05-26 00:00:00'),
    ("H0000000000000000008", "G000000003", "Tarea 2: Diccionarios y conjuntos en Python", '2023-05-11 00:00:00', '2023-05-25 00:00:00'),
    ("H0000000000000000009", "G000000004", "Tarea 1: Operadores y expresiones en Python", '2023-05-05 00:00:00', '2023-05-26 00:00:00'),
    ("H0000000000000000010", "G000000004", "Tarea 2: Control de flujo en Python", '2023-05-11 00:00:00', '2023-05-25 00:00:00'),
    ("H0000000000000000011", "G000000005", "Tarea 1: Funciones predefinidas en Python", '2023-05-05 00:00:00', '2023-05-26 00:00:00'),
    ("H0000000000000000012", "G000000005", "Tarea 2: Módulos y paquetes en Python", '2023-05-11 00:00:00', '2023-05-25 00:00:00');

INSERT INTO homeworkConfigs VALUES
    ("H0000000000000000001", "M0000000000000000001", 2),
    ("H0000000000000000001", "M0000000000000000002", 1),
    ("H0000000000000000001", "M0000000000000000003", 1),
    ("H0000000000000000002", "M0000000000000000004", 2),
    ("H0000000000000000002", "M0000000000000000005", 1),
    ("H0000000000000000002", "M0000000000000000006", 1),
    ("H0000000000000000003", "M0000000000000000007", 3),
    ("H0000000000000000003", "M0000000000000000008", 2),
    ("H0000000000000000003", "M0000000000000000009", 3),
    ("H0000000000000000004", "M0000000000000000010", 1),
    ("H0000000000000000004", "M0000000000000000011", 3),
    ("H0000000000000000004", "M0000000000000000012", 3),
    ("H0000000000000000005", "M0000000000000000013", 2),
    ("H0000000000000000005", "M0000000000000000014", 2),
    ("H0000000000000000005", "M0000000000000000015", 1),
    ("H0000000000000000006", "M0000000000000000016", 3),
    ("H0000000000000000006", "M0000000000000000017", 3),
    ("H0000000000000000006", "M0000000000000000018", 2),
    ("H0000000000000000007", "M0000000000000000019", 2),
    ("H0000000000000000007", "M0000000000000000001", 3),
    ("H0000000000000000007", "M0000000000000000002", 2),
    ("H0000000000000000008", "M0000000000000000003", 2),
    ("H0000000000000000008", "M0000000000000000004", 3),
    ("H0000000000000000008", "M0000000000000000005", 1),
    ("H0000000000000000009", "M0000000000000000006", 3),
    ("H0000000000000000009", "M0000000000000000007", 3),
    ("H0000000000000000009", "M0000000000000000008", 2),
    ("H0000000000000000010", "M0000000000000000009", 2),
    ("H0000000000000000010", "M0000000000000000010", 1),
    ("H0000000000000000010", "M0000000000000000011", 3),
    ("H0000000000000000011", "M0000000000000000012", 2),
    ("H0000000000000000011", "M0000000000000000007", 3),
    ("H0000000000000000011", "M0000000000000000002", 1),
    ("H0000000000000000012", "M0000000000000000013", 2),
    ("H0000000000000000012", "M0000000000000000014", 2),
    ("H0000000000000000012", "M0000000000000000015", 3);

INSERT INTO hw_questionAttempts VALUES
    ("A01551955", "H0000000000000000001", "CQ000000000000000001", "PAS", '00:23:45', '2023-04-14 12:43:23'),
    ("A01551955", "H0000000000000000001", "CQ000000000000000002", "PAS", '00:23:45', '2023-04-14 12:43:23'),
    ("A01731511", "H0000000000000000001", "CQ000000000000000001", "PAS", '00:23:45', '2023-04-14 12:43:23');

INSERT INTO questionAttempts VALUES
    ("A01552812", "G000000005", "CQ000000000000000001", "FAI", '00:23:45', '2023-04-14 12:43:03'),
    ("A01551955", "G000000001", "CQ000000000000000001", "FAI", '00:23:45', '2023-04-14 12:43:03'),
    ("A01551955", "G000000001", "CQ000000000000000002", "PAS", '00:23:45', '2023-04-14 12:43:03'),
    ("A01551955", "G000000001", "CQ000000000000000003", "PAS", '00:23:45', '2023-04-14 12:43:23');